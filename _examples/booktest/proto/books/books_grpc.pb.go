// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package books

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BooksClient is the client API for Books service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BooksClient interface {
	BooksByTags(ctx context.Context, in *BooksByTagsParams, opts ...grpc.CallOption) (*BooksByTagsResponse, error)
	BooksByTitleYear(ctx context.Context, in *BooksByTitleYearParams, opts ...grpc.CallOption) (*BooksByTitleYearResponse, error)
	CreateAuthor(ctx context.Context, in *CreateAuthorParams, opts ...grpc.CallOption) (*Author, error)
	CreateBook(ctx context.Context, in *CreateBookParams, opts ...grpc.CallOption) (*Book, error)
	DeleteBook(ctx context.Context, in *DeleteBookParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAuthor(ctx context.Context, in *GetAuthorParams, opts ...grpc.CallOption) (*Author, error)
	GetBook(ctx context.Context, in *GetBookParams, opts ...grpc.CallOption) (*Book, error)
	UpdateBook(ctx context.Context, in *UpdateBookParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBookISBN(ctx context.Context, in *UpdateBookISBNParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type booksClient struct {
	cc grpc.ClientConnInterface
}

func NewBooksClient(cc grpc.ClientConnInterface) BooksClient {
	return &booksClient{cc}
}

func (c *booksClient) BooksByTags(ctx context.Context, in *BooksByTagsParams, opts ...grpc.CallOption) (*BooksByTagsResponse, error) {
	out := new(BooksByTagsResponse)
	err := c.cc.Invoke(ctx, "/books.books/BooksByTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksClient) BooksByTitleYear(ctx context.Context, in *BooksByTitleYearParams, opts ...grpc.CallOption) (*BooksByTitleYearResponse, error) {
	out := new(BooksByTitleYearResponse)
	err := c.cc.Invoke(ctx, "/books.books/BooksByTitleYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksClient) CreateAuthor(ctx context.Context, in *CreateAuthorParams, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/books.books/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksClient) CreateBook(ctx context.Context, in *CreateBookParams, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/books.books/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksClient) DeleteBook(ctx context.Context, in *DeleteBookParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/books.books/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksClient) GetAuthor(ctx context.Context, in *GetAuthorParams, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/books.books/GetAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksClient) GetBook(ctx context.Context, in *GetBookParams, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/books.books/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksClient) UpdateBook(ctx context.Context, in *UpdateBookParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/books.books/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksClient) UpdateBookISBN(ctx context.Context, in *UpdateBookISBNParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/books.books/UpdateBookISBN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BooksServer is the server API for Books service.
// All implementations must embed UnimplementedBooksServer
// for forward compatibility
type BooksServer interface {
	BooksByTags(context.Context, *BooksByTagsParams) (*BooksByTagsResponse, error)
	BooksByTitleYear(context.Context, *BooksByTitleYearParams) (*BooksByTitleYearResponse, error)
	CreateAuthor(context.Context, *CreateAuthorParams) (*Author, error)
	CreateBook(context.Context, *CreateBookParams) (*Book, error)
	DeleteBook(context.Context, *DeleteBookParams) (*emptypb.Empty, error)
	GetAuthor(context.Context, *GetAuthorParams) (*Author, error)
	GetBook(context.Context, *GetBookParams) (*Book, error)
	UpdateBook(context.Context, *UpdateBookParams) (*emptypb.Empty, error)
	UpdateBookISBN(context.Context, *UpdateBookISBNParams) (*emptypb.Empty, error)
	mustEmbedUnimplementedBooksServer()
}

// UnimplementedBooksServer must be embedded to have forward compatible implementations.
type UnimplementedBooksServer struct {
}

func (UnimplementedBooksServer) BooksByTags(context.Context, *BooksByTagsParams) (*BooksByTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BooksByTags not implemented")
}
func (UnimplementedBooksServer) BooksByTitleYear(context.Context, *BooksByTitleYearParams) (*BooksByTitleYearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BooksByTitleYear not implemented")
}
func (UnimplementedBooksServer) CreateAuthor(context.Context, *CreateAuthorParams) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedBooksServer) CreateBook(context.Context, *CreateBookParams) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBooksServer) DeleteBook(context.Context, *DeleteBookParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBooksServer) GetAuthor(context.Context, *GetAuthorParams) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedBooksServer) GetBook(context.Context, *GetBookParams) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBooksServer) UpdateBook(context.Context, *UpdateBookParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBooksServer) UpdateBookISBN(context.Context, *UpdateBookISBNParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookISBN not implemented")
}
func (UnimplementedBooksServer) mustEmbedUnimplementedBooksServer() {}

// UnsafeBooksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BooksServer will
// result in compilation errors.
type UnsafeBooksServer interface {
	mustEmbedUnimplementedBooksServer()
}

func RegisterBooksServer(s grpc.ServiceRegistrar, srv BooksServer) {
	s.RegisterService(&Books_ServiceDesc, srv)
}

func _Books_BooksByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooksByTagsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).BooksByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.books/BooksByTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).BooksByTags(ctx, req.(*BooksByTagsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Books_BooksByTitleYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooksByTitleYearParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).BooksByTitleYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.books/BooksByTitleYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).BooksByTitleYear(ctx, req.(*BooksByTitleYearParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Books_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.books/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).CreateAuthor(ctx, req.(*CreateAuthorParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Books_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.books/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).CreateBook(ctx, req.(*CreateBookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Books_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.books/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).DeleteBook(ctx, req.(*DeleteBookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Books_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.books/GetAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).GetAuthor(ctx, req.(*GetAuthorParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Books_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.books/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).GetBook(ctx, req.(*GetBookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Books_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.books/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).UpdateBook(ctx, req.(*UpdateBookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Books_UpdateBookISBN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookISBNParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).UpdateBookISBN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.books/UpdateBookISBN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).UpdateBookISBN(ctx, req.(*UpdateBookISBNParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Books_ServiceDesc is the grpc.ServiceDesc for Books service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Books_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "books.books",
	HandlerType: (*BooksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BooksByTags",
			Handler:    _Books_BooksByTags_Handler,
		},
		{
			MethodName: "BooksByTitleYear",
			Handler:    _Books_BooksByTitleYear_Handler,
		},
		{
			MethodName: "CreateAuthor",
			Handler:    _Books_CreateAuthor_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _Books_CreateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _Books_DeleteBook_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _Books_GetAuthor_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _Books_GetBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _Books_UpdateBook_Handler,
		},
		{
			MethodName: "UpdateBookISBN",
			Handler:    _Books_UpdateBookISBN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "books.proto",
}
