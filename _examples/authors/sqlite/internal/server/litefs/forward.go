// Code generated by sqlc-grpc (https://github.com/walterwanderley/sqlc-grpc).

package litefs

import (
	"bytes"
	"context"
	"io"
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/raft"
)

var HttpClient = http.DefaultClient

func (lfs *LiteFS) ForwardToLeader(timeout time.Duration, methods ...string) func(http.Handler) http.Handler {
	return func(h http.Handler) http.Handler {
		return http.HandlerFunc(lfs.ForwardToLeaderFunc(h.ServeHTTP, timeout, methods...))
	}
}

func (lfs *LiteFS) ForwardToLeaderFunc(h http.HandlerFunc, timeout time.Duration, methods ...string) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var match bool

		for _, method := range methods {
			if r.Method == method {
				match = true
				break
			}
		}

		if !match || lfs.raft.State() == raft.Leader {
			h(w, r)
			return
		}

		redirectURL := lfs.leaser.RedirectURL()
		if redirectURL == "" {
			http.Error(w, "leader redirect URL not found", http.StatusInternalServerError)
			return
		}

		if r.URL.Query().Get("forward") == "false" {
			w.Header().Set("location", string(redirectURL))
			w.WriteHeader(http.StatusMovedPermanently)
			return
		}

		resp, err := forwardTo(redirectURL, r, timeout)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer resp.Body.Close()
		for k, v := range resp.Header {
			for i, value := range v {
				if i == 0 {
					w.Header().Set(k, value)
					continue
				}
				w.Header().Add(k, value)
			}
		}
		w.WriteHeader(resp.StatusCode)
		io.Copy(w, resp.Body)
	}
}

func forwardTo(addr string, req *http.Request, timeout time.Duration) (*http.Response, error) {
	newURL := addr + req.URL.Path + "?" + req.URL.RawQuery

	var buf bytes.Buffer
	defer req.Body.Close()
	_, err := io.Copy(&buf, req.Body)
	if err != nil {
		return nil, err
	}
	ctx, cancel := context.WithTimeout(req.Context(), timeout)
	defer cancel()
	newReq, err := http.NewRequestWithContext(ctx, req.Method, newURL, &buf)
	if err != nil {
		return nil, err
	}
	for k, v := range req.Header {
		for i, value := range v {
			if i == 0 {
				newReq.Header.Set(k, value)
				continue
			}
			newReq.Header.Add(k, value)
		}
	}
	log.Println("redirect to:", newURL)
	return HttpClient.Do(newReq)
}
