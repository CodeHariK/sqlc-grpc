package {{.Package}}

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"net"

	"github.com/google/uuid"
	"go.uber.org/zap"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"

	pb "{{ .GoModule}}/proto/{{.Package}}"
	"{{.GoModule}}/internal/validation"
)
	
type Service struct {
    pb.Unimplemented{{ .Package | UpperFirst}}ServiceServer
	logger *zap.Logger
	db     *Queries
}
	
func NewService(logger *zap.Logger, db *Queries) *Service {
	return &Service{logger: logger, db: db}
}

{{ range .Services }}
func (s *Service) {{.Name}}(ctx context.Context, in *{{.MethodInputType}}) (*{{.MethodOutputType}}, error) {
	{{ range .InputGrpc}}{{ .}}
	{{end}}
	{{ .ReturnCallDatabase}} err {{if not .EmptyOutput}}:{{else if not .HasCustomParams}}:{{end}}= s.db.{{ .Name}}(ctx{{ .ParamsCallDatabase}})
	if err != nil {
		s.logger.Error("{{.Name}} sql call failed", zap.Error(err))			
		return nil, err
	}
	{{ range .OutputGrpc}}{{ .}}		
	{{end}}
}
{{ end }}
